// Generated by CoffeeScript 1.7.1
(function() {
  var assert, feed, fly, person, pet, sinon;

  assert = require('assert');

  sinon = require('sinon');

  fly = require('./../fly');

  person = require('./resources/person');

  pet = require('./resources/pet');

  feed = require('./resources/feed');

  describe('middleware', function() {
    var middleware, next, req, res;
    middleware = fly(process.cwd() + '/test/resources');
    req = null;
    res = null;
    next = null;
    beforeEach(function() {
      req = {
        url: null,
        params: {},
        method: null
      };
      res = {};
      next = sinon.spy();
      sinon.spy(person, 'index');
      sinon.spy(person, 'show');
      sinon.spy(person, 'create');
      sinon.spy(person, 'update');
      sinon.spy(person, 'destroy');
      sinon.spy(pet, 'index');
      sinon.spy(pet, 'show');
      sinon.spy(pet, 'create');
      sinon.spy(pet, 'update');
      sinon.spy(pet, 'destroy');
      sinon.spy(feed, 'index');
      sinon.spy(feed, 'show');
      sinon.spy(feed, 'create');
      sinon.spy(feed, 'update');
      return sinon.spy(feed, 'destroy');
    });
    afterEach(function() {
      person.index.restore();
      person.show.restore();
      person.create.restore();
      person.update.restore();
      person.destroy.restore();
      pet.index.restore();
      pet.show.restore();
      pet.create.restore();
      pet.update.restore();
      pet.destroy.restore();
      feed.index.restore();
      feed.show.restore();
      feed.create.restore();
      feed.update.restore();
      return feed.destroy.restore();
    });
    describe('when resource request has chaining relationships', function() {
      it('calls index(req, res) action with parent_id', function() {
        req.method = 'GET';
        req.url = '/persons/1/pets/1/feeds';
        middleware(req, res, next);
        assert(feed.index.withArgs(req, res).calledOnce);
        assert(!feed.show.called);
        assert(!feed.create.called);
        assert(!feed.update.called);
        return assert(!feed.destroy.called);
      });
      it('calls show(req, res) action with parent_id and id', function() {
        req.method = 'GET';
        req.url = '/persons/1/pets/1/feeds/1';
        middleware(req, res, next);
        assert(feed.show.withArgs(req, res).calledOnce);
        assert(req.params.pet_id != null);
        assert(req.params.id != null);
        assert(!feed.index.called);
        assert(!feed.create.called);
        assert(!feed.update.called);
        return assert(!feed.destroy.called);
      });
      it('calls create(req, res) action with parent_id', function() {
        req.method = 'POST';
        req.url = '/persons/1/pets/1/feeds';
        middleware(req, res, next);
        assert(feed.create.withArgs(req, res).calledOnce);
        assert(req.params.pet_id != null);
        assert(!feed.index.called);
        assert(!feed.show.called);
        assert(!feed.update.called);
        return assert(!feed.destroy.called);
      });
      it('calls update(req, res) action with parent_id and id', function() {
        req.method = 'PUT';
        req.url = '/persons/1/pets/1/feeds/1';
        middleware(req, res, next);
        assert(feed.update.withArgs(req, res).calledOnce);
        assert(req.params.pet_id != null);
        assert(req.params.id != null);
        assert(!feed.index.called);
        assert(!feed.show.called);
        assert(!feed.create.called);
        return assert(!feed.destroy.called);
      });
      it('calls destroy(req, res) action with parent_id and id', function() {
        req.method = 'DELETE';
        req.url = '/persons/1/pets/1/feeds/1';
        middleware(req, res, next);
        assert(feed.destroy.withArgs(req, res).calledOnce);
        assert(req.params.pet_id != null);
        assert(req.params.id != null);
        assert(!feed.index.called);
        assert(!feed.show.called);
        assert(!feed.create.called);
        return assert(!feed.update.called);
      });
      return it('calls destroy(req, res) action without id if not specified, but has parent_id', function() {
        req.method = 'DELETE';
        req.url = '/persons/1/pets/1/feeds';
        middleware(req, res, next);
        assert(feed.destroy.withArgs(req, res).calledOnce);
        assert(req.params.pet_id != null);
        assert(req.params.id == null);
        assert(!feed.index.called);
        assert(!feed.show.called);
        assert(!feed.create.called);
        return assert(!feed.update.called);
      });
    });
    describe('when requested resource is single', function() {
      it('calls index(req, res) action', function() {
        req.method = 'GET';
        req.url = '/persons';
        middleware(req, res, next);
        assert(person.index.withArgs(req, res).calledOnce);
        assert(!person.show.called);
        assert(!person.create.called);
        assert(!person.update.called);
        return assert(!person.destroy.called);
      });
      it('calls show(req, res) action with id', function() {
        req.method = 'GET';
        req.url = '/persons/1';
        middleware(req, res, next);
        assert(person.show.withArgs(req, res).calledOnce);
        assert(!person.index.called);
        assert(!person.create.called);
        assert(!person.update.called);
        return assert(!person.destroy.called);
      });
      it('calls create(req, res) action', function() {
        req.method = 'POST';
        req.url = '/persons';
        middleware(req, res, next);
        assert(person.create.withArgs(req, res).calledOnce);
        assert(!person.show.called);
        assert(!person.index.called);
        assert(!person.update.called);
        return assert(!person.destroy.called);
      });
      it('calls update(req, res) action with id', function() {
        req.method = 'PUT';
        req.url = '/persons/1';
        middleware(req, res, next);
        assert(person.update.withArgs(req, res).calledOnce);
        assert(!person.show.called);
        assert(!person.create.called);
        assert(!person.index.called);
        return assert(!person.destroy.called);
      });
      it('calls destroy(req, res) action with id', function() {
        req.method = 'DELETE';
        req.url = '/persons/1';
        middleware(req, res, next);
        assert(person.destroy.withArgs(req, res).calledOnce);
        assert(!person.show.called);
        assert(!person.create.called);
        assert(!person.update.called);
        return assert(!person.index.called);
      });
      return it('calls destroy(req, res) action without id if not specified', function() {
        req.method = 'DELETE';
        req.url = '/persons';
        middleware(req, res, next);
        assert(person.destroy.withArgs(req, res).calledOnce);
        assert(!person.show.called);
        assert(!person.create.called);
        assert(!person.update.called);
        return assert(!person.index.called);
      });
    });
    describe('when the requested resource has invalid relatiohsip chains', function() {
      beforeEach(function() {
        req.method = 'GET';
        req.url = '/pets/1/feeds/1/persons/1';
        return middleware(req, res, next);
      });
      it('must call next()', function() {
        return assert(next.called);
      });
      return it('must not call the action of the resource', function() {
        return assert(!person.show.called);
      });
    });
    describe('when the requested resource name is singular', function() {
      beforeEach(function() {
        req.method = 'GET';
        req.url = '/person/1';
        return middleware(req, res, next);
      });
      it('must call next()', function() {
        return assert(next.called);
      });
      return it('must not call the action of the resource', function() {
        return assert(!person.show.called);
      });
    });
    describe('when HTTP method is unsupported', function() {
      beforeEach(function() {
        req.method = 'SOMETHING';
        req.url = '/persons/1';
        return middleware(req, res, next);
      });
      return it('must call next()', function() {
        return assert(next.called);
      });
    });
    describe('when POST request has specified resource id', function() {
      beforeEach(function() {
        req.method = 'POST';
        req.url = '/persons/1';
        return middleware(req, res, next);
      });
      it('must call next()', function() {
        return assert(next.called);
      });
      return it('must not call create() action', function() {
        return assert(!person.create.called);
      });
    });
    return describe('when PUT request has no specified id', function() {
      beforeEach(function() {
        req.method = 'PUT';
        req.url = '/persons';
        return middleware(req, res, next);
      });
      it('must call next()', function() {
        return assert(next.called);
      });
      return it('must not call update() action', function() {
        return assert(!person.update.called);
      });
    });
  });

}).call(this);
