// Generated by CoffeeScript 1.7.1
(function() {
  var URL, getResource, pluralize, tokenizePath;

  pluralize = require('pluralize');

  URL = require('url');

  getResource = function(dir, name) {
    var e;
    try {
      return require(dir + '/' + name);
    } catch (_error) {
      e = _error;
      return false;
    }
  };

  tokenizePath = function(path) {
    var chunks, i, id, plural, resource, singular, tokens, _i, _ref;
    path = path.replace(/\/+/g, '/');
    path = path.replace(/^\/|\/$/g, '');
    tokens = [];
    chunks = path.split('/');
    for (i = _i = 0, _ref = chunks.length; _i < _ref; i = _i += 2) {
      if (i >= chunks.length) {
        break;
      }
      plural = chunks[i];
      if (pluralize.plural(plural) !== plural) {
        return false;
      }
      singular = pluralize.singular(plural);
      if (i + 1 < chunks.length) {
        id = chunks[i + 1];
      } else {
        id = null;
      }
      resource = {
        name: singular,
        plural: plural,
        id: id
      };
      tokens.push(resource);
    }
    return tokens;
  };

  module.exports = function(resourceDir) {
    var middleware, relationships;
    relationships = require(resourceDir + '/relationships');
    middleware = function(req, res, next) {
      var child, i, parent, resource, resourceObj, tokens, _i, _j, _len, _ref;
      tokens = tokenizePath(URL.parse(req.url).pathname);
      if (tokens === false) {
        next();
        return;
      }
      for (_i = 0, _len = tokens.length; _i < _len; _i++) {
        resource = tokens[_i];
        if (getResource(resourceDir, resource.name) === false) {
          next();
          return;
        }
      }
      for (i = _j = 0, _ref = tokens.length; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
        if (i + 1 >= tokens.length) {
          break;
        }
        parent = tokens[i];
        child = tokens[i + 1];
        if (relationships[parent.name] !== child.name) {
          next();
          return;
        }
      }
      resource = tokens.pop();
      if (resource.id) {
        req.params.id = resource.id;
      }
      parent = tokens.pop();
      if (parent) {
        req.params[parent.name + '_id'] = parent.id;
      }
      resourceObj = getResource(resourceDir, resource.name);
      switch (req.method) {
        case 'GET':
          if (resource.id != null) {
            return resourceObj.show(req, res);
          } else {
            return resourceObj.index(req, res);
          }
          break;
        case 'POST':
          if (resource.id == null) {
            return resourceObj.create(req, res);
          } else {
            next();
          }
          break;
        case 'PUT':
          if (resource.id != null) {
            return resourceObj.update(req, res);
          } else {
            next();
          }
          break;
        case 'DELETE':
          return resourceObj.destroy(req, res);
        default:
          next();
      }
    };
    return middleware;
  };

}).call(this);
